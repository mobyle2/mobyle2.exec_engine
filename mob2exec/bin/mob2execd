#!/usr/bin/env python
# -*- coding: utf-8 -*-

#===============================================================================
# Created on Aug 13, 2012
# 
# @author: Bertrand NÃ©ron
# @contact: bneron <at> pasteur <dot> fr
# @organization: Institut Pasteur
# @license: GPLv3
#===============================================================================
from __future__ import print_function

import os
import sys


if os.environ.has_key('MOBYLE_HOME'):
    MOBYLEHOME = os.environ['MOBYLE_HOME']
    sys.path.insert(0, os.path.join( MOBYLEHOME, 'mob2exec'))
    
try:
    import mobyle.execution_engine
except ImportError:
    raise ImportError("mobyle.execution_engine must be in PYTHONPATH or MOBYLE_HOME must be defined in environment")

import logging.config
import multiprocessing
import threading
import time
import setproctitle


class Master(object):
    
    """The master is a daemon that start the JtMonitor and the DBManager process. 
It also keeps all these processes running. If a child process dies, another one is restarted automatically.
It start a tcp server in a separate thread which is in charge to recieved log emit by child processes and 
write them on log files.
"""
    

    def __init__(self, pid_file, cfg):
        """
        :param pid_file: the file where is store the pid of the daemon.
        :type pid_file: `lockfile.pidlockfile.PIDLockFile` instance.
        :param cfg: the configuration object created from .ini file.
        :type cfg: `mobyle.common.config.Config` object.
        """
        self.pid_file = pid_file
        self.cfg = cfg
        self.log_receiver = None
        self.log_server_thread = None
        self.jt = None
        self.mon_q = None
        self.jt_monitor = None
        self.db_q = None
        
        self._running = False
        
        
    def start(self):
        # can only start a process object created by current process
        # the Queue , DBManager, and Table must be create here instead of __init__
        
        # keep time to daemonize before beginning see comment above
        time.sleep(1)
        self._running = True
        setproctitle.setproctitle('mob2_master')
        self._name = "Master-{:d}".format(os.getpid())

        server_log_config = {'version' : 1 ,
                             'disable_existing_loggers': True,
                             'formatters': {'default': {'format': self.cfg.get('mob2exec', 'log_general_format').replace('%_(', '%('),
                                                        'datefmt': self.cfg.get('mob2exec', 'log_date_format'),
                                                        },
                                            },
                             'handlers': {
                                          'error': {
                                                   'class' : 'logging.handlers.WatchedFileHandler',
                                                   'formatter': 'default' ,
                                                   'filename': self.cfg.get('mob2exec','log_file'), 
                                                   'mode': 'a',
                                                   'level'   : 'NOTSET',
                                                   },
                                        'email': {
                                                 'class': 'logging.handlers.SMTPHandler' ,
                                                 'mailhost': self.cfg.get('mob2exec', 'log_email_mta'),
                                                 'fromaddr': self.cfg.get('mob2exec','log_email_from'), #fromaddr cannot be a list
                                                 'toaddrs' : self.cfg.get('mob2exec','log_email_to').split(),
                                                 'subject' : self.cfg.get('mob2exec','log_email_subject'), 
                                                 'level'   : self.cfg.get('mob2exec','log_email_level'),
                                                 },
                                          },  
                             'loggers': { 'mobyle': {
                                              'handlers': ['error', 'email'] ,
                                              'level': 'NOTSET'
                                        }
                        }
              }
        
        logging.config.dictConfig(server_log_config)
        
        from mobyle.execution_engine.logger import LogRecordSocketReceiver
        from mobyle.execution_engine.engine.monitor import JtMonitor
       
        try:
            self.log_receiver = LogRecordSocketReceiver()
        except Exception as err:
            msg = str(err) +" : the port used by logger is already in use. Check if an other mob2exec is not already running"
            sys.exit(msg)
        self.log_server_thread = threading.Thread(target = self.log_receiver.serve_forever)   
        self.log_server_thread.start()
        self._log = logging.getLogger('mobyle.{0}'.format(__name__))
        
        self.mon_q = multiprocessing.Queue()
        self.mon = JtMonitor(self.mon_q, cfg)
        self.db_q = multiprocessing.Queue()
        self.mon.start()
        
        while self._running:
            self._log.debug("{0} is in while {1:f}".format(self._name, time.time()))
            
            if not self.mon.is_alive():
                self._log.warning("{0} the Monitor is dead I restart one".format(self._name))
                self.mon = JtMonitor(self.mon_q, cfg)
                self.mon.start()
            time.sleep(5)
        self.mon.join()
        
    def stop(self, signum, frame):
        """
        stop DBmanager, monitor and logger properly before exiting
        """
        self._log = logging.getLogger('mobyle.{0}'.format(__name__))
        if self._running:
            self._running = False
            cmd = 'STOP'
            self._log.debug("put {0} in monitor Q".format(cmd))
            self.mon_q.put(cmd)
            self.mon.join()
            self._log.debug("shutdown logger server") 
            self.log_receiver.shutdown()
            self.log_server_thread.join()    
        else:
            self._log.error("Master is not running")
            sys.exit()
            
    def reload_conf(self, signum, frame):
        self._log = logging.getLogger('mobyle.{0}'.format(__name__))
        if self._running:
            self._log.debug("{0} recieved reload".format(self._name)) 
            cmd = 'RELOAD'
            self.mon_q.put(cmd)
        else:
            self._log.error("Master is not running")    
            
if __name__ == '__main__':
    import argparse
    import signal
    import lockfile.pidlockfile
    import daemon
    from mobyle.common.error import ConfigError
    
    parser = argparse.ArgumentParser(description = "mob2exec is the execution engine of mobyle2")
    parser.add_argument("cmd",
                        choices = ['start', 'stop', 'reload'],
                        default = None,
                        help = """
start : start the daemon,                                       
stop : to stop the daemon,
reload : to reload he configuration file without stopping the daemon (not implemented)
"""
                    )
    parser.add_argument("-c", "--config",
                        action = 'store',
                        dest = 'cfg_file',
                        default = None,
                        help = "the path to a mobyle2 configuration file")
    args = parser.parse_args()

    from mobyle.common.config import Config
    config_path = os.path.abspath(args.cfg_file)
    if config_path is None:
        raise ConfigError("no Mobyle config file specified (-c)")
    elif not os.path.exists(config_path):
        raise ConfigError("cannot access {0}: No such file ".format(config_path))
    cfg = Config(config_path).config()
    

    def communicate(pid, signum): 
        try:    
            os.kill(pid, signum)
        except OSError as err:
            print >> sys.stderr, "{0} (pid= {1:d} not responding: {2}".format(sys.argv[0], pid , err)    
           
    
    lock_file = cfg.get("mob2exec","pid_file") 
    #####################
    #                   #
    # start the daemon  #
    #                   #
    #####################         
    if args.cmd == 'start':
        if os.path.exists(lock_file):
            pid_file = lockfile.pidlockfile.PIDLockFile(lock_file)
            pid = pid_file.read_pid()
            print("{0} is already running abort this one (pid={1})".format(lock_file, pid), file = sys.stderr)
            sys.exit(2) 
        pid_dir = os.path.dirname(lock_file)
        if not os.access(pid_dir, os.R_OK|os.W_OK):
            print("start failed: cannot create pid file ({0})".format(lock_file), file=sys.stderr)
            sys.exit(1)
            
        pid_file = lockfile.pidlockfile.PIDLockFile(lock_file)
        master = Master(pid_file, cfg)
        ############################# DEBUG #################################
        log_file = cfg.get("mob2exec","log_file")
        stdout = open(os.path.join(os.path.dirname(log_file), 'mob2.stdout'), 'a')
        stderr = open(os.path.join(os.path.dirname(log_file) ,'mob2.stderr'), 'a')
        print("creation du context")
        context = daemon.DaemonContext( pidfile= pid_file, stdout= stdout, stderr= stderr )
        #context = daemon.DaemonContext( pidfile= pid_file )
        ############################## FIN DEBUG ##########################################
        print("configuration du context")
        context.signal_map = {
                          signal.SIGTERM: master.stop ,
                          signal.SIGHUP:  master.reload_conf ,
                          }
        
        print("debut de la demonisation")
        with context :
            master.start()
            
        print("main EXITING")
        
    #####################
    #                   #
    #  stop the daemon  #
    #                   #
    #####################         
    elif args.cmd == 'stop':
        if os.access(lock_file, os.R_OK|os.W_OK):
            pid_file = lockfile.pidlockfile.PIDLockFile(lock_file)
            pid = pid_file.read_pid()
            if pid:
                communicate(pid, signal.SIGTERM)
            else:
                print("{0} is not running ".format(sys.argv[0]), file=sys.stderr)
                sys.exit(3)
        else:
            print("Cannot access to {pid_file}. May be {prog} is not running ".format(pid_file= lock_file, prog=sys.argv[0]), file=sys.stderr)
            sys.exit(3)
    ######################
    #                    #
    # reload the config  #
    #                    #
    ######################         
    elif args.cmd == 'reload':
        if os.access(lock_file, os.R_OK|os.W_OK):
            pid_file = lockfile.pidlockfile.PIDLockFile(lock_file)
            pid = pid_file.read_pid()
            if pid:
                communicate(pid, signal.signal.SIGHUP)
            else:
                print("{0} is not running ".format(sys.argv[0]), file=sys.stderr)
                sys.exit(3)
        else:
            print("Cannot access to {pid_file}. May be {prog} is not running ".format(pid_file= lock_file, prog=sys.argv[0]), file=sys.stderr)
            sys.exit(3)
    else:
        assert True, parser.print_usage()

        
